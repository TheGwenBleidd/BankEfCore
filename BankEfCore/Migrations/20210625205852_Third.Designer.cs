// <auto-generated />
using System;
using BankEfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BankEfCore.Migrations
{
    [DbContext(typeof(MySqlDbContext))]
    [Migration("20210625205852_Third")]
    partial class Third
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("BankEfCore.Accounts", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("BankClientId")
                        .HasColumnType("int");

                    b.Property<long?>("BankClientIdKey")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("BankClientIdKey");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BankEfCore.BankClients", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<long?>("CityIdKey")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ClientBirthday")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ClientFullName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<long?>("CountryIdKey")
                        .HasColumnType("bigint");

                    b.Property<string>("UniqueIdentityNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.HasAlternateKey("UniqueIdentityNumber");

                    b.HasIndex("CityIdKey");

                    b.HasIndex("CountryIdKey");

                    b.ToTable("BankClients");
                });

            modelBuilder.Entity("BankEfCore.Cities", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("CityCode")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.HasKey("ID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("BankEfCore.Countries", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("CountryCode")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("BankEfCore.Transactions", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("ClientReceiverAccountId")
                        .HasColumnType("int");

                    b.Property<long?>("ClientReceiverAccountIdKey")
                        .HasColumnType("bigint");

                    b.Property<int?>("ClientReceiverId")
                        .HasColumnType("int");

                    b.Property<long?>("ClientReceiverIdKey")
                        .HasColumnType("bigint");

                    b.Property<int?>("ClientSenderAccountId")
                        .HasColumnType("int");

                    b.Property<long?>("ClientSenderAccountIdKey")
                        .HasColumnType("bigint");

                    b.Property<int?>("ClientSenderId")
                        .HasColumnType("int");

                    b.Property<long?>("ClientSenderIdKey")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("ClientReceiverAccountIdKey");

                    b.HasIndex("ClientReceiverIdKey");

                    b.HasIndex("ClientSenderAccountIdKey");

                    b.HasIndex("ClientSenderIdKey");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BankEfCore.Accounts", b =>
                {
                    b.HasOne("BankEfCore.BankClients", "Client")
                        .WithMany()
                        .HasForeignKey("BankClientIdKey");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BankEfCore.BankClients", b =>
                {
                    b.HasOne("BankEfCore.Cities", "Cities")
                        .WithMany()
                        .HasForeignKey("CityIdKey");

                    b.HasOne("BankEfCore.Countries", "Countries")
                        .WithMany()
                        .HasForeignKey("CountryIdKey");

                    b.Navigation("Cities");

                    b.Navigation("Countries");
                });

            modelBuilder.Entity("BankEfCore.Transactions", b =>
                {
                    b.HasOne("BankEfCore.Accounts", "ReceiverAccount")
                        .WithMany()
                        .HasForeignKey("ClientReceiverAccountIdKey");

                    b.HasOne("BankEfCore.BankClients", "Receiver")
                        .WithMany()
                        .HasForeignKey("ClientReceiverIdKey");

                    b.HasOne("BankEfCore.Accounts", "SenderAccount")
                        .WithMany()
                        .HasForeignKey("ClientSenderAccountIdKey");

                    b.HasOne("BankEfCore.BankClients", "Sender")
                        .WithMany()
                        .HasForeignKey("ClientSenderIdKey");

                    b.Navigation("Receiver");

                    b.Navigation("ReceiverAccount");

                    b.Navigation("Sender");

                    b.Navigation("SenderAccount");
                });
#pragma warning restore 612, 618
        }
    }
}
